# This example demonstrates pod-based CPU and memory pinning.
# All containers of a pod run in the same CPU/memory pool.
# The capacity of a pool is defined as a number of pods it can
# contain.
#
# The two steps for running a pod in a pod pool are:
#
# 1. Annotate the pod:
#
#    metadata:
#      annotations:
#        pool.podpools.cri-resource-manager.intel.com: POOLNAME
#
# 2. Make sure that total CPU resources required by the containers
#    in the pod match the CPUs per pod in the pod pool.

policy:
  # pod-based CPU and memory pinning is implemented in the podpools policy.
  Active: podpools

  # AvailableResources specifies CPUs that active policy is allowed to
  # use: containers will not run outside AvailableResources
  # CPUs. Other CPUs are considered reserved for system. Corresponding
  # kubelet parameter: --system-reserved. By default
  # AvailableResources contains all CPUs.
  AvailableResources:
    # "CPU" can be the number of CPUs or explicitly defined set of
    # CPUs. In this example we use 14 CPUs, excluding CPUs #0 and #1
    # (hyperthreads of core 0).
    CPU: cpuset:2-15

  # ReservedResources specifies CPU(s) that active policy dedicates
  # for running kube-system pods. Corresponding kubelet parameter:
  # --kube-reserved.
  ReservedResources:
    # Here we dedicate CPU #15 for these pods.
    # This leaves 13 out of 14 available CPUs unallocated.
    CPU: cpuset:15

  # podpools-specific configuration specifies the following.
  # 1. Pod pool definitions ("Pools").
  #    The policy creates one or more pool instances from a definition.
  # 2. Resources (CPUs) needed by each pod pool definition in total.
  #    This can be given as one of the following:
  #    1. a number of pool instances:      "Instances: <NUM>"
  #    2. a number of CPUs:                "Instances: <NUM> CPUs"
  #    3. percentage of non-reserved CPUs: "Instances: <NUM> %"
  #    In case 1, CPUs needed by the definition is <NUM> * CPUs per pool.
  # 3. How many CPUs each pool instance gets from the CPUs allocated
  #    to its definition in total.
  # 4. Capacity of each pool instance.
  #    This is the maximum number of pods in a single pool instance.
  podpools:
    # By default podpools pins both CPU and memory of all containers.
    # Pinning either of them can be disabled with:
    # pinCPU: false
    # pinMemory: false
    Pools:
      # Define the "singlecpu" pod pool type:
      - Name: singlecpu
        # Take 3 out of 13 AvailableResources CPUs to be used by
        # all "singlecpu" pod pool instances in total.
        # This leaves 10 CPUs unallocated for other pools.
        Instances: 3 CPUs
        # Every "singlecpu" pod pool instance has 1 CPU to run all
        # pods assigned to the instance.
        # As the definition can use 3 CPUs in total, there will be 3
        # "singlecpu" pool instances.
        CPU: 1
        # Every "singlecpu" pod pool instance holds at most 2 pods.
        MaxPods: 2

        # Note that every pod that is annotated to run on a singlecpu
        # pool is assumed to consume CPU/MaxPods = 500m CPU. Therefore
        # the sum of request.cpu's of all containers in this kind of
        # pod should be 500m. Otherwise kube-scheduler may overload or
        # underload the node.

      # Define the "dualcpu" pod pool type:
      - Name: dualcpu
        # FillOrder specifies the order in which the capacity of pod
        # pool instances of this pool type is filled with pods. The
        # default is Balanced: new pod is assigned to a pool instance
        # with most free capacity. The opposite is Packed: new pod is
        # assigned to a pool instance with least free capacity.
        FillOrder: Packed
        # Take at most 50 % of non-reserved CPUs (50 % * 13 = 6.5)
        # to be used by all "dualcpu" pool instances in total.
        Instances: 50 %
        # Every "dualcpu" pool instance has 2 CPUs.
        # That is, floor(6.5 / 2) = 3 pool instances of this type will
        # be created, and therefore 6 CPUs actually consumed to this
        # pool type.
        # This leaves 4 CPUs unallocated.
        CPU: 2
        # Every "dualcpu" pool instance holds at most 3 pods.
        MaxPods: 3

      # In addition to user-defined pools, there are two built-in
      # pools:
      #
      # - "reserved" contains the ReservedResources CPUs and runs all
      #   kube-system pods.
      #
      # - "default" contains CPUs that are neither reserved nor
      #   allocated to any user-defined pools. It runs all pods that
      #   are not kube-system and are not assigned to any user-defined
      #   pool. The number of CPUs in the default pool can be
      #   overridden by defining "default" pool like other pools. If
      #   CPUs were not left over for the default pool, it will use
      #   the same CPUs as the reserved pool.
logger:
  Debug: policy
