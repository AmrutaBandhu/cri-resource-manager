// Copyright 2019 Intel Corporation. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package resmgr

import (
	"flag"
	"fmt"
	"github.com/intel/cri-resource-manager/pkg/cri/client"
	"github.com/intel/cri-resource-manager/pkg/cri/resource-manager/sockets"
)

const (
	// DefaultDockerShimSocket is the default socket path for dockershim.
	DefaultDockerShimSocket = sockets.DockerShim
	// DefaultRelaySocket is the default socket path the relay listens on.
	DefaultRelaySocket = sockets.ResourceManagerRelay
	// DefaultRelayDir is the default directory for files generated by the relay.
	DefaultRelayDir = "/var/lib/cri-relay"
	// DefaultRelayCache is the default location for the relay cache file.
	DefaultRelayCache = DefaultRelayDir + "/cache"
	// DefaultAgentSocket is the default agent socket we try to connect
	DefaultAgentSocket = sockets.ResourceManagerAgent
	// DefaultConfigSocket is the default value of our config server socket
	DefaultConfigSocket = sockets.ResourceManagerConfig
	// reserved string for default socket values
	defaultSocketValue = "default socket value"
	// reserved string for omitting a connection
	dontConnectValue = client.DontConnect
	// Flag for path of unix domain socket we expect the CRI image service to be found at.
	optionImageSocket = "image-socket"
	// Flag for path of unix domain socket we expect the CRI runtime service to be found at.
	optionRuntimeSocket = "runtime-socket"
	// Flag for path of unix domain socket we are expected to found at.
	optionRelaySocket = "relay-socket"
	// Flag for the directory path where to save relay-generated files in.
	optionRelayDir = "relay-dir"
	// Flag for unix domain socket of the agent to connect
	optionAgentSocket = "agent-socket"
	// Flag for path of unix domain socket we're listening for config updates
	optionConfigSocket = "config-socket"
)

// CRI resource manager/relay options configurable via the command line.
type options struct {
	ImageSocket   string
	RuntimeSocket string
	RelaySocket   string
	RelayDir      string
	AgentSocket   string
	ConfigSocket  string
}

// Relay options with their defaults.
var opt = options{
	ImageSocket:   dontConnectValue,
	RuntimeSocket: DefaultDockerShimSocket,
	RelaySocket:   DefaultRelaySocket,
	RelayDir:      DefaultRelayDir,
	AgentSocket:   DefaultAgentSocket,
	ConfigSocket:  DefaultConfigSocket,
}

// shouldStartImageService returns true if we should start relaying images services.
func (o *options) shouldStartImageService() bool {
	return o.imageServiceSocket() != dontConnectValue
}

// runtimeServiceSocket returs the effective value for the CRI runtime service socket.
func (o *options) runtimeServiceSocket() string {
	switch o.RuntimeSocket {
	case defaultSocketValue:
		return DefaultDockerShimSocket
	default:
		return o.RuntimeSocket
	}
}

// imageServiceSocket returns the effective value for the CRI image service socket.
func (o *options) imageServiceSocket() string {
	switch o.ImageSocket {
	case defaultSocketValue, dontConnectValue:
		return dontConnectValue
	default:
		return o.ImageSocket
	}
}

func (o *options) Set(name, value string) error {
	switch name {
	case optionImageSocket:
		o.ImageSocket = value
	case optionRuntimeSocket:
		o.RuntimeSocket = value
	case optionRelaySocket:
		o.RelaySocket = value
	case optionRelayDir:
		o.RelayDir = value
	case optionAgentSocket:
		o.AgentSocket = value
	case optionConfigSocket:
		o.ConfigSocket = value
	default:
		return resmgrError("unknown relay option '%s' with value '%s'", name, value)
	}

	return nil
}

func (o *options) Get(name string) string {
	switch name {
	case optionImageSocket:
		return o.imageServiceSocket()
	case optionRuntimeSocket:
		return o.runtimeServiceSocket()
	case optionRelaySocket:
		return o.RelaySocket
	case optionRelayDir:
		return o.RelayDir
	case optionAgentSocket:
		return o.AgentSocket
	case optionConfigSocket:
		return o.ConfigSocket
	default:
		return fmt.Sprintf("<no value, unknown resource manager option '%s'>", name)
	}
}

type wrappedOption struct {
	name string
	opt  *options
}

func wrapOption(name, usage string) (wrappedOption, string, string) {
	return wrappedOption{name: name, opt: &opt}, name, usage
}

func (wo wrappedOption) Name() string {
	return wo.name
}

func (wo wrappedOption) Set(value string) error {
	return wo.opt.Set(wo.Name(), value)
}

func (wo wrappedOption) String() string {
	return wo.opt.Get(wo.Name())
}

// Register our command-line flags.
func init() {
	flag.Var(wrapOption(optionImageSocket,
		"Unix domain socket path where CRI image service requests should be relayed to."))
	flag.Var(wrapOption(optionRuntimeSocket,
		"Unix domain socket path where CRI runtime service requests should be relayed to."))
	flag.Var(wrapOption(optionRelaySocket,
		"Unix domain socket path where the resource manager should serve requests on."))
	flag.Var(wrapOption(optionRelayDir,
		"Permanent storage directory path for the resource manager to store its state in."))
	flag.Var(wrapOption(optionAgentSocket, "local socket of the cri-resmgr agent to connect"))
	flag.Var(wrapOption(optionConfigSocket,
		"Unix domain socket path where the resource manager listens for cri-resmgr-agent"))
}
