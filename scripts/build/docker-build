#!/bin/bash

# usage: docker-image [--image name] [ --tag tag ] [--publish registry] dir-with-Dockerfile

DIR=""
TAG="testing"

fatal () {
    echo "[docker-build] fatal error: $@" 1>&2
    exit 1
}

log () {
    echo "[docker-build] $@"
}

xeq () {
    [ -z "$Q" ] && log "$@"
    $@ || exit 1
}

print_usage () {
    echo "usage: $0 [--image name] [--tag tag] [--publish docker-registry ] dir-with-Dockerfile"
    exit ${1:-1}
}

parse_commandline () {
    while [ -n "$1" ]; do
        case $1 in
            --image|-i)
                IMAGE="$2"
                shift 2
                ;;
            --tag|-t)
                TAG="$2"
                shift 2
                ;;
            --publish|-p)
                REGISTRY="$2"
                shift 2
                ;;
            --quiet|-q)
                Q="-q"
                shift
                ;;
            --help|-h)
                print_usage 0
                ;;
            --trace|--debug)
                set -x
                shift
                ;;
            -*)
                BUILD_OPTIONS="$BUILD_OPTIONS $1"
                shift
                ;;
            *)
                if [ -n "$DIR" ]; then
                    print_usage
                fi
                DIR="$1"
                shift
                ;;
        esac
    done

    if [ -z "$DIR" ]; then
        fatal "no directory given with Dockerfile"
    fi
}

check_dockerfile () {
    DOCKERFILE=$DIR/Dockerfile
    if [ ! -e $DOCKERFILE ]; then
        fatal "Dockerfile $DOCKERFILE not found in $DIR."
    fi
}

check_deployment_file () {
    for yaml in $DIR/*deployment*.yaml; do
        case $yaml in
            *'*') return 1;;
            *)    break;;
        esac
    done
    IMAGE=$(cat $yaml | tr -s '\t' ' ' | \
                sed 's/#.*$//g' | \
                grep 'image:' | sed 's/^ *image: *//')
    case $IMAGE in
        */*:*)
            registry=${IMAGE%%/*}; IMAGE=${IMAGE#*/}
            TAG=${IMAGE##*:}
            IMAGE=${IMAGE%:*}
            if [ -z "$REGISTRY" ]; then
                REGISTRY="$registry"
            fi
            ;;
        *:*)
            TAG=${IMAGE##*:}
            IMAGE=${IMAGE%:*}
            ;;
        */*)
            registry=${IMAGE%%/*}
            IMAGE=${IMAGE#*/}
        ;;
        *)
        ;;
    esac

    if [ -z "$REGISTRY" -a -n "$registry" ]; then
        REGISTRY="$registry"
    fi
}

check_imagename () {
    if [ -z "$IMAGE" ]; then
        if ! check_deployment_file; then
            IMAGE=${DIR##*/}
        fi
    fi
}

show_summary () {
    log "Building docker image $IMAGE:$TAG..."
    log "  - using docker file $DOCKERFILE"
    if [ -n "$REGISTRY" ]; then
        log "  - publishing to $REGISTRY"
    fi
}

docker_build () {
    log "building image $IMAGE:$TAG..."
    xeq docker build $BUILD_OPTIONS -f $DOCKERFILE -t $IMAGE:$TAG . $Q
}

docker_publish () {
    if [ -n "$REGISTRY" -a "$REGISTRY" != "-" ]; then
        log "tagging image $IMAGE:$TAG for $REGISTRY..."
        xeq docker tag $IMAGE:$TAG $REGISTRY/$IMAGE:$TAG
        log "publishing image as $REGISTRY/$IMAGE:$TAG..."
        xeq docker push $REGISTRY/$IMAGE:$TAG
    fi
}

parse_commandline $*
check_dockerfile
check_imagename
show_summary
docker_build
docker_publish
